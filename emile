#!/usr/bin/env bash
set -euo pipefail

CONFIG_FILE="${HOME}/.emilerc"

# ---------------- Utils ----------------

usage() {
    printf "%s\n" \
        "emile — Utility for painless blogging with Zola." \
        "" \
        "Config saved in ~/.emilerc (TOML format)." \
        "" \
        "Usage:" \
        "  emile set blogs <label> <posts_dir>" \
        "  emile set config editor </path/to/editor>" \
        "  emile set config locale <IANA_tz>" \
        "  emile new <label> \"Post title\" [-t tag1,tag2] [-c Category] [-e none|/editor]" \
        "  emile new -d <posts_dir> \"Post title\" [-t tag1,tag2] [-c Category] [-e none|/editor]" \
        "  emile conf" \
        "  emile doctor" \
        "" \
        "Examples:" \
        "  emile set blogs nightcup ~/code/blog/content/posts" \
        "  emile set config editor /usr/bin/vim" \
        "  emile set config locale Europe/London" \
        "  emile new nightcup \"My cuppa\" -t casual,blogging -c \"Casual Cup\"" \
        "  emile new nightcup \"My cuppa\" -t casual -e /usr/bin/emacs" \
        "  emile new nightcup \"My cuppa\" -e none"
    exit 1
}

err() { printf "Error: %s\n" "$*" >&2; exit 1; }

touch_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        printf "%s\n" "# emile config (TOML)" > "$CONFIG_FILE"
        printf "\n[blogs]\n\n[config]\n" >> "$CONFIG_FILE"
    fi
}

abs_path() {
    local p="$1"
    p="${p/#\~/$HOME}"
    if command -v realpath >/dev/null 2>&1; then
        realpath -m "$p"
    else
        ( cd "$p" 2>/dev/null && pwd ) || { mkdir -p "$p"; cd "$p" && pwd; }
    fi
}

trim() { printf '%s' "$1" | sed -e 's/^[[:space:]]\+//' -e 's/[[:space:]]\+$//'; }
escape_toml() { printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'; }

toml_get() {
    local section="$1" key="$2"
    [ -f "$CONFIG_FILE" ] || return 1
    local current="" line
    while IFS= read -r line || [ -n "$line" ]; do
        line="${line%$'\r'}"
        if [[ $line =~ ^[[:space:]]*\[[^]]+\][[:space:]]*$ ]]; then
            if [[ $line =~ ^[[:space:]]*\[$section\][[:space:]]*$ ]]; then
                current="$section"
            else
                current=""
            fi
            continue
        fi
        [ "$current" = "$section" ] || continue
        [[ $line =~ ^[[:space:]]*(#|$) ]] && continue
        case "$line" in
            *=*)
                local k="${line%%=*}"
                local v="${line#*=}"
                k="$(trim "$k")"
                [ "$k" = "$key" ] || continue
                v="$(trim "$v")"
                if [[ $v == \"*\" && $v == *\" ]]; then
                    v="${v#\"}"; v="${v%\"}"
                fi
                printf '%s' "$v"
                return 0
                ;;
        esac
    done < "$CONFIG_FILE"
    return 1
}

toml_set() {
    local section="$1" key="$2" val="$3"
    touch_config
    local tmp="${CONFIG_FILE}.tmp"
    : > "$tmp"
    local current="" seen_section=0 wrote_key=0 line
    while IFS= read -r line || [ -n "$line" ]; do
        line="${line%$'\r'}"
        if [[ $line =~ ^[[:space:]]*\[[^]]+\][[:space:]]*$ ]]; then
            if [ "$current" = "$section" ] && [ "$wrote_key" -eq 0 ]; then
                printf '%s = "%s"\n' "$key" "$val" >> "$tmp"
                wrote_key=1
            fi
            printf "%s\n" "$line" >> "$tmp"
            if [[ $line =~ ^[[:space:]]*\[$section\][[:space:]]*$ ]]; then
                current="$section"; seen_section=1
            else
                current=""
            fi
            continue
        fi
        if [ "$current" = "$section" ] && [[ $line =~ ^[[:space:]]*$key[[:space:]]*= ]]; then
            printf '%s = "%s"\n' "$key" "$val" >> "$tmp"
            wrote_key=1
            continue
        fi
        printf "%s\n" "$line" >> "$tmp"
    done < "$CONFIG_FILE"

    if [ "$seen_section" -eq 0 ]; then
        printf "\n[%s]\n%s = \"%s\"\n" "$section" "$key" "$val" >> "$tmp"
    else
        if [ "$current" = "$section" ] && [ "$wrote_key" -eq 0 ]; then
            printf '%s = "%s"\n' "$key" "$val" >> "$tmp"
        fi
    fi

    mv "$tmp" "$CONFIG_FILE"
}

get_tz() {
    local cfg
    cfg="$(toml_get config locale || true)"
    if [ -n "$cfg" ]; then
        printf '%s' "$cfg"
        return 0
    fi

    if [ -n "${TZ:-}" ]; then
        printf '%s' "$TZ"
        return 0
    fi

    printf '%s' "UTC"
}

now_rfc3339_local() {
    local tz; tz="$(get_tz)"
    if DATE_STR=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S%:z" 2>/dev/null); then
        printf '%s' "$DATE_STR"
    else
        local D Z
        D=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S")
        Z=$(TZ="$tz" date "+%z") # +0100
        Z="${Z:0:3}:${Z:3:2}" # -> +01:00
        printf '%s%s' "$D" "$Z"
    fi
}

slugify() {
    printf '%s' "$1" \
        | tr '[:upper:]' '[:lower:]' \
        | sed -E 's/[^a-z0-9]+/-/g; s/^-+//; s/-+$//'
}

create_post() {
    local posts_dir="$1"; shift
    local title="$1";     shift

    local tags_csv="" category="" editor_override=""
    while getopts ":t:c:e:" opt; do
        case "$opt" in
            t) tags_csv="$OPTARG" ;;
            c) category="$OPTARG" ;;
            e) editor_override="$OPTARG" ;;
            *) usage ;;
        esac
    done
    shift $((OPTIND-1))

    [ -n "$title" ] || err "Missing post title"

    posts_dir="$(abs_path "$posts_dir")"
    mkdir -p "$posts_dir"

    local slug; slug="$(slugify "$title")"
    local target_dir="$posts_dir/$slug"
    local n=2
    while [ -e "$target_dir" ]; do
        target_dir="$posts_dir/${slug}-${n}"
        n=$((n+1))
    done
    mkdir -p "$target_dir"

    local dt; dt="$(now_rfc3339_local)"
    local index_file="$target_dir/index.md"

    {
        printf '+++\ntitle = "%s"\ndate = %s\ndraft = false\n' \
            "$(escape_toml "$title")" "$dt"

        local wrote=0
        if [ -n "$tags_csv" ]; then
            [ $wrote -eq 1 ] || { printf "[taxonomies]\n"; wrote=1; }
            IFS=',' read -r -a arr <<< "$tags_csv"
            printf 'tags = ['
            local i
            for i in "${!arr[@]}"; do
                [ "$i" -gt 0 ] && printf ', '
                local t; t="$(trim "${arr[$i]}")"
                printf '"%s"' "$(escape_toml "$t")"
            done
            printf ']\n'
        fi
        if [ -n "$category" ]; then
            [ $wrote -eq 1 ] || { printf "[taxonomies]\n"; wrote=1; }
            local c; c="$(trim "$category")"
            printf 'categories = ["%s"]\n' "$(escape_toml "$c")"
        fi

        printf "+++\n\nWrite your post here…\n"
    } > "$index_file"

    printf "%s\n" "$index_file"

    local editor=""
    if [ -n "$editor_override" ]; then
        [ "$editor_override" != "none" ] && editor="$editor_override"
    else
        editor="$(toml_get config editor || true)"
        [ -z "$editor" ] && editor="${EDITOR:-}"
    fi
    if [ -n "${editor:-}" ] && [ "$editor" != "none" ]; then
        if [ -x "$editor" ] || command -v "$editor" >/dev/null 2>&1; then
            "$editor" "$index_file" || true
        fi
    fi
}

# ---------------- Commands ----------------

cmd_new() {
    local posts_dir="" label="" title=""
    if [ "${1:-}" = "-d" ]; then
        shift
        posts_dir="${1:-}"; [ -n "$posts_dir" ] || err "Missing -d <posts_dir>"
        shift
    elif [ -n "${1:-}" ] && [[ "${1}" != -* ]]; then
        label="$1"; shift
    fi

    [ -n "${1:-}" ] || usage
    title="$1"; shift

    if [ -n "$label" ]; then
        posts_dir="$(toml_get blogs "$label" || true)"
        [ -n "$posts_dir" ] || err "Blog label '$label' not found in ${CONFIG_FILE}. Use: emile set blogs $label /path/to/posts OR pass -d."
    fi
    if [ -z "$posts_dir" ]; then
        err "No blog configured. Either:
    1) specify: emile new -d /path/to/posts \"Title\" -t ... -c ... [-e ...]
    2) or label first: emile set blogs <label> /path/to/posts"
    fi

    create_post "$posts_dir" "$title" "$@"
}

cmd_set() {
    [ $# -ge 2 ] || usage
    local section="$1"; shift
    case "$section" in
        blogs)
            [ $# -eq 2 ] || usage
            local label="$1" path="$2"
            local ap; ap="$(abs_path "$path")"
            toml_set blogs "$label" "$ap"
            printf "Saved blog '%s' -> %s\n" "$label" "$ap"
            ;;
        config)
            [ $# -eq 2 ] || usage
            local key="$1" value="$2"
            toml_set config "$key" "$value"
            printf "Saved config %s = %s\n" "$key" "$value"
            ;;
        *)
            err "Unknown section '${section}'. Use 'blogs' or 'config'."
            ;;
    esac
}

cmd_conf() {
    [ -f "$CONFIG_FILE" ] || { echo "No ~/.emilerc yet."; return; }
    echo "[blogs]"
    local line current=""
    while IFS= read -r line || [ -n "$line" ]; do
        line="${line%$'\r'}"
        if [[ $line =~ ^[[:space:]]*\[[^]]+\][[:space:]]*$ ]]; then
            if [[ $line =~ ^[[:space:]]*\[blogs\][[:space:]]*$ ]]; then current="blogs"; else current=""; fi
            continue
        fi
        [ "$current" = "blogs" ] || continue
        [[ $line =~ ^[[:space:]]*(#|$) ]] && continue
        echo "  $line"
    done < "$CONFIG_FILE"
    echo
    echo "[config]"
    current=""
    while IFS= read -r line || [ -n "$line" ]; do
        line="${line%$'\r'}"
        if [[ $line =~ ^[[:space:]]*\[[^]]+\][[:space:]]*$ ]]; then
            if [[ $line =~ ^[[:space:]]*\[config\][[:space:]]*$ ]]; then current="config"; else current=""; fi
            continue
        fi
        [ "$current" = "config" ] || continue
        [[ $line =~ ^[[:space:]]*(#|$) ]] && continue
        echo "  $line"
    done < "$CONFIG_FILE"
}

cmd_doctor() {
    echo "emile doctor"
    echo "============="
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "- Config: NOT FOUND at $CONFIG_FILE"
        return
    else
        echo "- Config: found at $CONFIG_FILE"
    fi

    # Timezone check
    local tz; tz="$(get_tz)"
    echo "- Resolved timezone: $tz"
    if DATE_STR=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S%:z" 2>/dev/null); then
        echo "  Timestamp sample: $DATE_STR"
    else
        if DATE_STR=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S %z" 2>/dev/null); then
            echo "  Timestamp sample: $DATE_STR (colonized %z)"
        else
            echo "  Warning: 'date' didn’t accept TZ='$tz' — timestamps may fall back."
        fi
    fi

    # Editor check
    local editor; editor="$(toml_get config editor || true)"
    [ -z "$editor" ] && editor="${EDITOR:-}"
    if [ -n "${editor:-}" ]; then
        if [ -x "$editor" ] || command -v "$editor" >/dev/null 2>&1; then
            echo "- Editor: OK ($editor)"
        else
            echo "- Editor: configured but not found on PATH ($editor)"
        fi
    else
        echo "- Editor: not configured (set config editor /path/to/editor or export \$EDITOR)"
    fi

    # Blogs list
    echo "- Blogs:"
    local line current="" any=0
    while IFS= read -r line || [ -n "$line" ]; do
        line="${line%$'\r'}"
        if [[ $line =~ ^[[:space:]]*\[[^]]+\][[:space:]]*$ ]]; then
            if [[ $line =~ ^[[:space:]]*\[blogs\][[:space:]]*$ ]]; then current="blogs"; else current=""; fi
            continue
        fi
        [ "$current" = "blogs" ] || continue
        [[ $line =~ ^[[:space:]]*(#|$) ]] && continue
        any=1
        local k="${line%%=*}"; k="$(trim "$k")"
        local v="${line#*=}";  v="$(trim "$v")"
        if [[ $v == \"*\" && $v == *\" ]]; then v="${v#\"}"; v="${v%\"}"; fi
        if [ -d "$v" ] && [ -w "$v" ]; then
            echo "  • $k -> $v (OK)"
        elif [ -d "$v" ]; then
            echo "  • $k -> $v (exists, not writable)"
        else
            echo "  • $k -> $v (missing)"
        fi
    done < "$CONFIG_FILE"
    [ $any -eq 1 ] || echo "  (none)"
}

# ---------------- Main ----------------

main() {
    local cmd="${1:-}"; [ -n "$cmd" ] || usage
    shift || true
    case "$cmd" in
        set)    cmd_set "$@" ;;
        new)    cmd_new "$@" ;;
        conf)   cmd_conf ;;
        doctor) cmd_doctor ;;
        -h|--help|help) usage ;;
        *)      err "Unknown command: $cmd" ;;
    esac
}

main "$@"
