#!/bin/sh
# ------------------------------------------------
# A POSIX utility for painless blogging with Zola.
# ------------------------------------------------
# by Seb Cossu
# ------------------------------------------------
# sebcossu.com
# blog.sebcossu.com
# sebcossu.github.com
# ------------------------------------------------

set -eu

CONFIG_FILE="${HOME}/.emilerc"

# ~v[ UTILS ]v~

usage() {
    printf '%s\n' "
emile — A POSIX utility for painless blogging with Zola.

Usage:
    
    - Set a label for your blog posts folder (saved in ~/.emilerc):
        emile set blogs <label> <posts_dir>

    - Set your favourite editor (saved in ~/.emilerc)
        emile set config editor </path/to/editor>

    - Set your locale (saved in ~/.emilerc)
        emile set config locale <IANA_tz>

    - Create a new post for a blog:
        emile new <label> \"Post title\" [-t tag1,tag2] [-c Category] [-e none|/editor]
        emile new -d <posts_dir> \"Post title\" [-t tag1,tag2] [-c Category] [-e none|/editor]

    - List all the posts for a blog:
        emile posts <label>

    - Edit a blog post:
        emile edit <label> <title|folder> [-e none|/editor]

    - Remove a blog post:
        emile rm <label> <title|folder> [-f]

    - View your Emile config (~/.emilerc):
        emile conf

    - Troubleshoot/Diagnose your Emile config (~/.emilerc)
        emile doctor

    - Delete your Emile config (~/.emilerc)
        emile purge
    "
    exit 1
}

err() { printf 'Error: %s\n' "$*" >&2; exit 1; }

touch_config() {
    [ -f "$CONFIG_FILE" ] || {
        printf '%s\n' '# Emile config' > "$CONFIG_FILE"
    }
}

abs_path() {
    p=$1
    case $p in
        "~"*) p=${p#\~}; p=$HOME$p ;;
    esac
    case $p in
        /*) : ;;
        *) p=$PWD/$p ;;
    esac
    printf '%s\n' "$p" | awk -F/ '
        {
            out_count=0
            for (i=1; i<=NF; i++) {
                part=$i
                if (part=="" || part==".") continue
                if (part=="..") { if (out_count>0) out_count--; next }
                out[++out_count]=part
            }
            s="/"
            for (j=1; j<=out_count; j++) {
                s=s out[j]
                if (j<out_count) s=s "/"
            }
            print s
        }'
}

trim() {
    printf '%s' "$1" | sed -e 's/^[[:space:]]\{1,\}//' -e 's/[[:space:]]\{1,\}$//'
}

escape_toml() {
    printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'
}

toml_get() {
    section=$1; key=$2
    [ -f "$CONFIG_FILE" ] || return 1
    awk -v section="$section" -v want="$key" '
        BEGIN{
            in_section=0
            sec_re="^[[:space:]]*\\[" section "\\][[:space:]]*$"
        }
        {
            line=$0
            sub(/\r$/,"",line)
            if (line ~ /^[[:space:]]*\[.*\][[:space:]]*$/) {
              in_section = (line ~ sec_re) ? 1 : 0
              next
            }
            if (!in_section) next
            if (line ~ /^[[:space:]]*([#]|$)/) next
            pos=index(line,"="); if (!pos) next
            k=substr(line,1,pos-1); v=substr(line,pos+1)
            gsub(/^[[:space:]]+|[[:space:]]+$/,"",k)
            if (k!=want) next
            gsub(/^[[:space:]]+|[[:space:]]+$/,"",v)
            if (v ~ /^".*"$/) { sub(/^"/,"",v); sub(/"$/,"",v) }
            print v; exit 0
        }
    ' "$CONFIG_FILE"
}

toml_set() {
    section=$1; key=$2; val=$3
    touch_config
    tmp="${CONFIG_FILE}.tmp"
    : > "$tmp"
    awk -v section="$section" -v k="$key" -v v="$val" '
        BEGIN{
            in_section=0; seen=0; wrote=0
            sec_re="^[[:space:]]*\\[" section "\\][[:space:]]*$"
        }
        {
            line=$0
            sub(/\r$/,"",line)
            if (line ~ /^[[:space:]]*\[.*\][[:space:]]*$/) {
                if (in_section && !wrote) { print k " = \"" v "\"" }
                print line
                in_section = (line ~ sec_re) ? 1 : 0
                if (in_section) seen=1
                next
            }
            if (in_section && line ~ "^[[:space:]]*" k "[[:space:]]*=") {
                print k " = \"" v "\""; wrote=1; next
            }
            print line
        }
        END{
            if (!seen) {
                print ""
                print "[" section "]"
                print k " = \"" v "\""
            } else if (in_section && !wrote) {
                print k " = \"" v "\""
            }
        }
    ' "$CONFIG_FILE" > "$tmp"
    mv "$tmp" "$CONFIG_FILE"
}

get_tz() {
    val=$(toml_get config locale || true 2>/dev/null || :)
    if [ -n "${val:-}" ]; then printf '%s' "$val"; return 0; fi
    if [ -n "${TZ:-}" ]; then printf '%s' "$TZ"; return 0; fi
    printf '%s' "UTC"
}

now_rfc3339_local() {
    tz=$(get_tz)
    out=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S%:z" 2>/dev/null || printf '')
    case $out in
        *[+-][0-9][0-9]:[0-9][0-9]) printf '%s' "$out"; return 0 ;;
    esac
    D=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S")
    Z=$(TZ="$tz" date "+%z" | sed 's/\([+-][0-9][0-9]\)\([0-9][0-9]\)/\1:\2/')
    printf '%s%s' "$D" "$Z"
}

slugify() {
    LC_ALL=C printf '%s' "$1" \
      | tr '[:upper:]' '[:lower:]' \
      | sed 's/[^a-z0-9][^a-z0-9]*/-/g; s/^-*//; s/-*$//'
}

title_from_index() {
    idx=$1
    [ -f "$idx" ] || return 1
    awk '
        BEGIN{in_block=0}
        /^\+\+\+$/ { in_block = in_block ? 0 : 1; next }
        in_block && $0 ~ /^[[:space:]]*title[[:space:]]*=/ {
            line=$0
            sub(/^[[:space:]]*title[[:space:]]*=[[:space:]]*/,"",line)
            gsub(/^[[:space:]]*"/,"",line); gsub(/"[[:space:]]*$/,"",line)
            print line; exit
        }
    ' "$idx"
}

create_post() {
    posts_dir=$1; shift
    title=$1; shift

    tags_csv=""; category=""; editor_override=""
    while [ $# -gt 0 ]; do
        case $1 in
            -t) tags_csv=$2; shift 2 ;;
            -c) category=$2; shift 2 ;;
            -e) editor_override=$2; shift 2 ;;
            *) break ;;
        esac
    done

    [ -n "$title" ] || err "Missing post title"

    posts_dir=$(abs_path "$posts_dir")
    mkdir -p "$posts_dir"

    slug=$(slugify "$title")
    target_dir="$posts_dir/$slug"
    n=2
    while [ -e "$target_dir" ]; do
        target_dir="$posts_dir/${slug}-$n"
        n=$((n+1))
    done
    mkdir -p "$target_dir"

    dt=$(now_rfc3339_local)
    index_file="$target_dir/index.md"

    {
        printf '+++\ntitle = "%s"\ndate = %s\ndraft = false\n' \
            "$(escape_toml "$title")" "$dt"

        wrote=0
        if [ -n "$tags_csv" ]; then
            [ "$wrote" -eq 1 ] || { printf '%s\n' "[taxonomies]"; wrote=1; }
            first=1
            IFS=,; set -- $tags_csv; IFS=' '
            printf '%s' 'tags = ['
            for t in "$@"; do
                t=$(trim "$t")
                [ $first -eq 1 ] || printf '%s' ', '
                printf '"%s"' "$(escape_toml "$t")"
                first=0
            done
            printf '%s\n' ']'
        fi
        if [ -n "${category:-}" ]; then
            [ "$wrote" -eq 1 ] || { printf '%s\n' "[taxonomies]"; wrote=1; }
            c=$(trim "$category")
            printf 'categories = ["%s"]\n' "$(escape_toml "$c")"
        fi

        printf '%s\n\n' '+++'
        printf '%s\n' 'Write your post here…'
    } > "$index_file"

    printf '%s\n' "$index_file"

    editor=""
    if [ -n "$editor_override" ]; then
        [ "$editor_override" != "none" ] && editor="$editor_override"
    else
        editor=$(toml_get config editor || true 2>/dev/null || :)
        [ -z "${editor:-}" ] && editor="${EDITOR:-}"
    fi
    if [ -n "${editor:-}" ] && [ "$editor" != "none" ]; then
        if [ -x "$editor" ] || command -v "$editor" >/dev/null 2>&1; then
            "$editor" "$index_file" || :
        fi
    fi
}

resolve_posts_dir() {
    label=$1
    posts_dir=$(toml_get blogs "$label" || true 2>/dev/null || :)
    [ -n "$posts_dir" ] || err "Blog label '$label' not found in ${CONFIG_FILE}. Use: emile set blogs $label /path/to/posts OR pass -d."
    printf '%s' "$posts_dir"
}

find_post_dir_by_query() {
    posts_dir=$1
    q=$2
    posts_dir=$(abs_path "$posts_dir")

    if [ -d "$posts_dir/$q" ]; then
        printf '%s\n' "$posts_dir/$q"; return 0
    fi
    qslug=$(slugify "$q")
    if [ -d "$posts_dir/$qslug" ]; then
        printf '%s\n' "$posts_dir/$qslug"; return 0
    fi

    found=""
    count=0
    {
        for d in "$posts_dir"/*; do
            [ -d "$d" ] || continue
            [ -f "$d/index.md" ] || continue
            t=$(title_from_index "$d/index.md" || true)
            [ -n "$t" ] || continue
            if [ "$(printf '%s' "$t" | tr '[:upper:]' '[:lower:]')" = "$(printf '%s' "$q" | tr '[:upper:]' '[:lower:]')" ]; then
                printf '%s\n' "$d"
            fi
        done
    } | {
        while IFS= read -r line; do
            count=$((count+1))
            [ $count -eq 1 ] && found=$line
        done
        if [ $count -eq 0 ]; then
            exit 1
        elif [ $count -eq 1 ]; then
            printf '%s\n' "$found"; exit 0
        else
            printf "Multiple matches for '%s':\n" "$q" >&2
            for d in "$posts_dir"/*; do
                [ -d "$d" ] || continue
                [ -f "$d/index.md" ] || continue
                t=$(title_from_index "$d/index.md" || true)
                [ -n "$t" ] || t="(untitled)"
                printf "  %s (%s)\n" "$t" "$(basename "$d")" >&2
            done
            exit 2
        fi
    }
    return $?
}

# ~v[ COMMANDS ]v~

cmd_set() {
    [ $# -ge 2 ] || usage
    section=$1; shift
    case $section in
        blogs)
            [ $# -eq 2 ] || usage
            label=$1; path=$2
            ap=$(abs_path "$path")
            toml_set blogs "$label" "$ap"
            printf "Saved blog '%s' -> %s\n" "$label" "$ap"
            ;;
        config)
            [ $# -eq 2 ] || usage
            key=$1; value=$2
            toml_set config "$key" "$value"
            printf "Saved config %s = %s\n" "$key" "$value"
            ;;
        *)
            err "Unknown section '$section'. Use 'blogs' or 'config'."
            ;;
    esac
}

cmd_new() {
    posts_dir=""; label=""; title=""
    if [ "${1:-}" = "-d" ]; then
        shift; [ $# -ge 1 ] || usage
        posts_dir=$1; shift
    elif [ $# -ge 1 ] && [ "${1#-}" = "$1" ]; then
        label=$1; shift
    fi
    [ $# -ge 1 ] || usage
    title=$1; shift
    [ -n "$posts_dir" ] || posts_dir=$(resolve_posts_dir "$label")
    create_post "$posts_dir" "$title" "$@"
}

cmd_posts() {
    [ $# -eq 1 ] || usage
    label=$1
    posts_dir=$(resolve_posts_dir "$label")
    posts_dir=$(abs_path "$posts_dir")
    for d in "$posts_dir"/*; do
        [ -d "$d" ] || continue
        [ -f "$d/index.md" ] || continue
        t=$(title_from_index "$d/index.md" || printf '%s' "(untitled)")
        printf '%s (%s)\n' "$t" "$(basename "$d")"
    done
}

cmd_edit() {
    [ $# -ge 2 ] || usage
    label=$1; shift
    query=$1; shift
    posts_dir=$(resolve_posts_dir "$label")
    dir=$(find_post_dir_by_query "$posts_dir" "$query") || err "Post not found for '$query' in '$posts_dir'"
    index="$dir/index.md"; [ -f "$index" ] || err "No index.md in $dir"

    editor_override=""
    while [ $# -gt 0 ]; do
        case $1 in
            -e) editor_override=$2; shift 2 ;;
            *) break ;;
        esac
    done

    editor=""
    if [ -n "$editor_override" ]; then
        [ "$editor_override" != "none" ] && editor="$editor_override"
    else
        editor=$(toml_get config editor || true 2>/dev/null || :)
        [ -z "${editor:-}" ] && editor="${EDITOR:-}"
    fi
    [ -n "${editor:-}" ] || err "No editor configured. Use: emile set config editor /path/to/editor or set \$EDITOR"

    if [ -x "$editor" ] || command -v "$editor" >/dev/null 2>&1; then
        "$editor" "$index"
    else
        err "Editor not found: $editor"
    fi
}

cmd_rm() {
    [ $# -ge 2 ] || usage
    label=$1; shift
    query=$1; shift
    force=0
    while [ $# -gt 0 ]; do
        case $1 in
            -f) force=1; shift ;;
            *) break ;;
        esac
    done
    posts_dir=$(resolve_posts_dir "$label")
    dir=$(find_post_dir_by_query "$posts_dir" "$query") || err "Post not found for '$query' in '$posts_dir'"

    [ -n "$dir" ] && [ "$dir" != "/" ] || { printf 'Refusing to remove: %s\n' "${dir:-<empty>}" >&2; exit 1; }

    if [ $force -eq 0 ]; then
        printf "Remove '%s' ? [y/N] " "$(basename "$dir")"
        read ans || ans=""
        case ${ans:-} in y|Y|yes|YES) : ;; *) printf '%s\n' "Aborted."; exit 1 ;; esac
    fi

    rm -rf -- "$dir"
    printf 'Removed: %s\n' "$dir"
}

cmd_conf() {
    if [ -f "$CONFIG_FILE" ]; then
        cat "$CONFIG_FILE"
    else
        printf '(no config at %s)\n' "$CONFIG_FILE"
    fi
}

cmd_doctor() {
    printf '%s\n' "emile doctor"
    printf '%s\n' "============"

    if [ ! -f "$CONFIG_FILE" ]; then
        printf '%s\n' "- Config: NOT FOUND at $CONFIG_FILE"
        return
    else
        printf '%s\n' "- Config: found at $CONFIG_FILE"
    fi

    tz=$(get_tz)
    printf '%s\n' "- Resolved timezone: $tz"

    TS=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S%:z" 2>/dev/null || printf '')
    case $TS in
        *[+-][0-9][0-9]:[0-9][0-9])
            printf '  %s\n' "Timestamp sample: $TS"
            ;;
        *)
            D=$(TZ="$tz" date "+%Y-%m-%dT%H:%M:%S")
            Z=$(TZ="$tz" date "+%z" | sed 's/\([+-][0-9][0-9]\)\([0-9][0-9]\)/\1:\2/')
            printf '  %s\n' "Timestamp sample: $D$Z"
            ;;
    esac

    ed=$(toml_get config editor || true 2>/dev/null || :)
    [ -z "${ed:-}" ] && ed="${EDITOR:-}"
    if [ -n "${ed:-}" ]; then
        if [ -x "$ed" ] || command -v "$ed" >/dev/null 2>&1; then
            printf '%s\n' "- Editor: OK ($ed)"
        else
            printf '%s\n' "- Editor: configured but not found on PATH ($ed)"
        fi
    else
        printf '%s\n' "- Editor: not configured (set config editor … or \$EDITOR)"
    fi

    printf '%s\n' "- Blogs:"
    blog_lines=$(
        awk '
            BEGIN{in_section=0}
            /^[[:space:]]*\[.*\][[:space:]]*$/ {
                in_section = ($0 ~ /^[[:space:]]*\[blogs\][[:space:]]*$/)?1:0; next
            }
            in_section && $0 !~ /^[[:space:]]*(#|$)/ { print }
        ' "$CONFIG_FILE"
    )

    if [ -z "$blog_lines" ]; then
        printf ' (none)\n'
        return
    fi

    printf '%s\n' "$blog_lines" | while IFS= read -r line; do
        k=${line%%=*}
        v=${line#*=}

        k=$(printf '%s' "$k" | sed -e 's/^[[:space:]]\{1,\}//' -e 's/[[:space:]]\{1,\}$//')
        v=$(printf '%s' "$v" | sed -e 's/^[[:space:]]\{1,\}//' -e 's/[[:space:]]\{1,\}$//')

        v=$(printf '%s' "$v" \
            | sed -e 's/[[:space:]]\{1,\}#.*$//' \
                -e 's/^[[:space:]]*//; s/[[:space:]]*$//' \
                -e 's/^"//; s/"$//')

        if [ -d "$v" ] && [ -w "$v" ]; then
            printf '  • %s -> %s (OK)\n' "$k" "$v"
        elif [ -d "$v" ]; then
            printf '  • %s -> %s (exists, not writable)\n' "$k" "$v"
        else
            printf '  • %s -> %s (missing)\n' "$k" "$v"
        fi
    done
}

cmd_purge() {
    if [ -f "$CONFIG_FILE" ]; then
        rm -f -- "$CONFIG_FILE"
        printf 'Removed %s\n' "$CONFIG_FILE"
    else
        printf 'No config to remove (%s)\n' "$CONFIG_FILE"
    fi
}

# ~v[ MAIN ]v~

[ $# -gt 0 ] || usage
cmd=$1; shift || true

case "$cmd" in
  set)    cmd_set "$@" ;;
  new)    cmd_new "$@" ;;
  posts)  cmd_posts "$@" ;;
  edit)   cmd_edit "$@" ;;
  rm)     cmd_rm "$@" ;;
  conf)   cmd_conf ;;
  doctor) cmd_doctor ;;
  purge)  cmd_purge ;;
  -h|--help|help) usage ;;
  *)      err "Unknown command: $cmd" ;;
esac
